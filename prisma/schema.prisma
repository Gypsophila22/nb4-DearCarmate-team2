// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  employeeNumber String
  phoneNumber    String
  imageUrl       String?
  password       String
  isAdmin        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  company           Companies           @relation(fields: [companyId], references: [id])
  companyId         Int
  contract          Contracts[]
  uploadedDocuments ContractDocuments[]
}

model Companies {
  id                Int                 @id @default(autoincrement())
  companyName       String
  companyCode       String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  user              Users[]
  customer          Customers[]
  ContractDocuments ContractDocuments[]
}

model Cars {
  id                Int        @id @unique @default(autoincrement())
  carNumber         String
  manufacturingYear Int
  mileage           Int
  price             Int
  accidentCount     Int
  explanation       String
  accidentDetails   String
  status            CarStatus  @default(possession)
  modelId           Int
  carModel          CarModel   @relation(fields: [modelId], references: [id])
  contract          Contracts?
}

// 차종
model CarModel {
  id           Int     @id @default(autoincrement())
  model        String
  type         CarType
  manufacturer String
  cars         Cars[]

  @@unique([manufacturer, model])
}

enum CarType {
  SUV
  세단
  경차
}

enum CarStatus {
  possession // 보유 중
  contractProceeding // 계약 진행 중
  contractCompleted // 계약 완료
}

model Customers {
  id            Int         @id @default(autoincrement())
  name          String
  gender        Gender
  phoneNumber   String
  ageGroup      AgeGroup?
  region        Region?
  email         String?
  memo          String?
  contractCount Int         @default(0)
  contract      Contracts[]

  company   Companies @relation(fields: [companyId], references: [id])
  companyId Int
}

enum Gender {
  male
  female
}

enum AgeGroup {
  GENERATION_10
  GENERATION_20
  GENERATION_30
  GENERATION_40
  GENERATION_50
  GENERATION_60
  GENERATION_70
  GENERATION_80
}

enum Region {
  서울
  경기
  인천
  강원
  충북
  충남
  세종
  대전
  전북
  전남
  광주
  경북
  경남
  대구
  울산
  부산
  제주
}

enum ContractsStatus {
  carInspection // 차량 확인
  priceNegotiation // 가격 협의
  contractDraft // 계약서 작성 중
  contractSuccessful // 계약 성공
  contractFailed // 계약 실패
}

model Contracts {
  id             Int                 @id @default(autoincrement())
  date           DateTime            @default(now())
  contractPrice  Int // 계약 금액
  status         ContractsStatus // 계약 상태
  resolutionDate DateTime // 계약 종료일
  carId          Int                 @unique
  car            Cars                @relation(fields: [carId], references: [id]) // 차량
  customerId     Int
  customer       Customers           @relation(fields: [customerId], references: [id]) // 고객
  meetings       Meetings[] // 미팅 일정
  userId         Int // 담당자
  user           Users               @relation(fields: [userId], references: [id])
  documents      ContractDocuments[] // 계약서
}

model Meetings {
  id         Int       @id @default(autoincrement())
  date       DateTime
  contractId Int
  contract   Contracts @relation(fields: [contractId], references: [id], onDelete: Cascade)
  alarms     Alarms[]
}

model Alarms {
  id        Int      @id @default(autoincrement())
  time      DateTime
  meetingId Int
  meeting   Meetings @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model ContractDocuments {
  id           Int      @id @default(autoincrement())
  companyId    Int
  contractId   Int? // ← nullable (임시 업로드 허용)
  uploaderId   Int
  originalName String
  storedName   String
  mimeType     String
  size         Int
  path         String?
  url          String?
  createdAt    DateTime @default(now())

  company  Companies  @relation(fields: [companyId], references: [id])
  contract Contracts? @relation(fields: [contractId], references: [id])
  uploader Users      @relation(fields: [uploaderId], references: [id])

  @@index([companyId])
  @@index([contractId])
}
